# ==============================================================================
# YOLOv11 分割模型配置文件
# ==============================================================================
#
# 核心思路与框架:
#   此文件是整个模型训练和推理的“控制中心”。它采用YAML格式，将所有可配置的
#   参数集中管理，实现了代码与配置的分离。这种做法使得调整实验参数、切换
#   数据集或模型变得非常方便，无需修改任何Python代码。
#
#   主要包含三个部分:
#   1. 数据集配置: 定义了训练和验证数据的位置以及类别信息。
#   2. 模型超参数: 设置了训练过程中的关键参数，如批量大小、学习率等。
#      特别地，这些参数被设计为“基准值”，训练脚本会根据检测到的硬件
#      （如高性能GPU或普通笔记本电脑）动态调整它们，以实现最佳性能。
#   3. 数据增强配置: 控制了在训练期间对图像应用的各种变换，以提高模型的
#      泛化能力和鲁棒性。

# ------------------------------------------------------------------------------
# 1. 数据集配置
# ------------------------------------------------------------------------------
# 定义训练集和验证集数据的路径。
# 这些路径应指向包含图像文件的目录。
# YOLO框架会自动在图片旁边查找同名的.txt标签文件。
# 例如: 如果 train 指向 '../Data/raw/train/images'，
#       对于图片 '.../images/摄像头1/img1.jpg'，框架会查找 '.../images/摄像头1/img1.txt'。

path: G:/soft/soft/python project/Yolo_metric_alarm/Data/raw
model_path: G:\soft\soft\python project\Yolo_metric_alarm\Yolo_seg_Alarm\gemini\models
epochs: 100
batch_size: 16
img_size: 640
train: train/images
val: val/images
nc: 5
names: ['挖掘机', '打桩机', '拉管机', '烟雾', '火']

# ------------------------------------------------------------------------------
# 2. 类别名称
# ------------------------------------------------------------------------------
# 一个将类别索引映射到类别名称的字典。
# 顺序至关重要，必须与标签文件中的类别ID完全匹配。
# 本项目定义: 0: 挖掘机, 1: 打桩机, 2: 拉管机

names:
  0: 挖掘机
  1: 打桩机
  2: 拉管机
  3: 烟雾
  4: 火

# ------------------------------------------------------------------------------
# 3. 模型配置
# ------------------------------------------------------------------------------
# 模型权重。指定YOLOv11分割模型的预训练权重。
# 对于初次训练，建议使用官方预训练权重，例如 'yolov11-n-seg.pt'。

weights: yolov11l-seg.pt

# ------------------------------------------------------------------------------
# 4. 模型超参数 (可被 train.py 动态调整)
# ------------------------------------------------------------------------------
# 以下是基准值。训练脚本会根据检测到的硬件来覆盖这些值，以优化性能。
#
# 示例:
# - 在低规格笔记本上: batch (批量大小) 可能会被设置为 2 或 4。
# - 在 NVIDIA A4500 专业显卡上: batch 可以是 16, 32, 甚至更高。

# --- 训练设置 ---
batch: 8       # 默认批量大小 (会被动态覆盖)。一次训练迭代中处理的图片数量。
epochs: 10      # 训练轮次。整个数据集将被完整训练100次。
imgsz: 640       # 训练时的输入图片尺寸。所有图片将被缩放到 640x640。
optimizer: AdamW # 优化器。AdamW 是一个在计算机视觉任务中表现稳健的常用选择。
amp: True         # 启用混合精度训练，减少显存占用并加速训练
task: detect     # 任务类型。'detect' 用于目标检测任务，'segment' 用于分割任务。
patience: 20     # 早停策略。训练过程中连续20轮没有改善验证损失，则停止训练。
save_period: -1  # 模型保存周期。-5 表示每5个 epoch 都保存模型。
# --- 学习率 ---
lr0: 0.01      # 初始学习率。训练开始时的学习率。
lrf: 0.01      # 最终学习率因子。最终学习率 = lr0 * lrf。用于学习率衰减策略。

# --- 数据增强设置 ---
# 更多细节请参阅 Ultralytics 官方文档: https://docs.ultralytics.com/modes/train/#augmentation-settings
# 以下提供的数值是经过验证的良好起点。

# --- 几何变换增强 ---
degrees: 15.0    # 随机旋转图像的角度范围 (+/- 15度)
translate: 0.1   # 随机平移图像的比例 (+/- 10%)
scale: 0.5       # 随机缩放图像的比例 (+/- 50%)
shear: 5.0       # 随机错切图像的角度 (+/- 5度)
perspective: 0.0 # 随机透视变换的程度 (范围 0-0.001, 0表示不使用)
flipud: 0.5      # 垂直翻转图像的概率 (50%的几率)
fliplr: 0.5      # 水平翻转图像的概率 (50%的几率)

# --- 颜色空间增强 ---
hsv_h: 0.015     # 随机调整HSV颜色空间的H(色调)通道 (比例)
hsv_s: 0.7       # 随机调整HSV颜色空间的S(饱和度)通道 (比例)
hsv_v: 0.4       # 随机调整HSV颜色空间的V(亮度)通道 (比例)

# --- 高级增强技术 ---
mosaic: 1.0      # Mosaic数据增强的概率 (1.0表示总是启用)。将四张图片拼接成一张。
mixup: 0.1       # MixUp数据增强的概率。将两张图片及其标签线性混合。
copy_paste: 0.1  # Copy-Paste数据增强的概率。将一个目标从一张图复制粘贴到另一张图，对分割任务尤其有效。